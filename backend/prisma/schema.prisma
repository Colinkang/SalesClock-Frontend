// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String   // hashed password
  name      String
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  customers      Customer[]
  visitPlans     VisitPlan[]
  visitReports   VisitReport[]
  articles       Article[]
  invitationsSent Invitation[] @relation("InvitedBy")
  
  @@map("users")
}

model Invitation {
  id         String    @id @default(uuid())
  email      String
  token      String    @unique
  role       Role      @default(USER)
  invitedById String?  @map("invited_by")
  acceptedAt DateTime? @map("accepted_at")
  createdAt  DateTime  @default(now()) @map("created_at")
  expiresAt  DateTime  @map("expires_at")

  invitedBy User? @relation("InvitedBy", fields: [invitedById], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email])
  @@index([acceptedAt])
  @@map("invitations")
}

model Customer {
  id        String   @id @default(uuid())
  name      String
  phone     String
  address   String   @default("")
  latitude  Decimal? @db.Decimal(10, 8)
  longitude Decimal? @db.Decimal(11, 8)
  notes     String   @default("")
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  creator     User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  visitPlans  VisitPlan[]
  visitReports VisitReport[]

  @@index([createdBy])
  @@map("customers")
}

model VisitPlan {
  id                 String          @id @default(uuid())
  customerId         String          @map("customer_id")
  plannedDate        DateTime        @map("planned_date") @db.Date
  status             VisitStatus     @default(PENDING)
  checkInTime        DateTime?       @map("check_in_time")
  checkInLatitude    Decimal?        @map("check_in_latitude") @db.Decimal(10, 8)
  checkInLongitude   Decimal?        @map("check_in_longitude") @db.Decimal(11, 8)
  checkInPhotoUrl    String?         @map("check_in_photo_url")
  checkInNotes       String?         @map("check_in_notes")
  checkOutTime       DateTime?       @map("check_out_time")
  createdBy          String          @map("created_by")
  createdAt          DateTime        @default(now()) @map("created_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")

  customer    Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  creator     User          @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  reports     VisitReport[]

  @@index([customerId])
  @@index([plannedDate])
  @@index([status])
  @@index([createdBy])
  @@map("visit_plans")
}

model VisitReport {
  id                 String   @id @default(uuid())
  visitPlanId        String   @map("visit_plan_id")
  customerId         String   @map("customer_id")
  startTime          DateTime @map("start_time")
  endTime            DateTime @map("end_time")
  communicationPoints String @default("") @map("communication_points")
  customerFeedback   String  @default("") @map("customer_feedback")
  followUpTasks      String  @default("") @map("follow_up_tasks")
  attachments        Json     @default("[]")
  createdBy          String   @map("created_by")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  visitPlan VisitPlan @relation(fields: [visitPlanId], references: [id], onDelete: Cascade)
  customer  Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  creator   User      @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([visitPlanId])
  @@index([customerId])
  @@map("visit_reports")
}

model Article {
  id        String   @id @default(uuid())
  title     String
  content   String   @default("")
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  creator User @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([createdBy])
  @@map("articles")
}

enum Role {
  ADMIN
  MANAGER
  USER
}

enum VisitStatus {
  PENDING
  CHECKED_IN
  COMPLETED
  CANCELLED
}

